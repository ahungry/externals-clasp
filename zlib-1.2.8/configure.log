--------------------
./configure -shared --prefix=/Users/meister/Development/cando/brcl/build/cando.app/Contents/Resources/externals/common
Sat Oct 12 00:30:49 EDT 2013
=== ztest13110.c ===
extern int getchar();
int hello() {return getchar();}
===
/usr/bin/clang -c ztest13110.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest13110.c ===
int foo() { return 0; }
===
/usr/bin/clang -c -O3 ztest13110.c

Checking for shared library support...
=== ztest13110.c ===
extern int getchar();
int hello() {return getchar();}
===
/usr/bin/clang -w -c -O3 -fPIC ztest13110.c
/usr/bin/clang -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest13110.dylib ztest13110.o
Building shared library libz.1.2.8.dylib with /usr/bin/clang.

=== ztest13110.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
/usr/bin/clang -c -O3 -D_LARGEFILE64_SOURCE=1 ztest13110.c
ztest13110.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/types.h:172:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest13110.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
/usr/bin/clang -O3 -o ztest13110 ztest13110.c
Checking for fseeko... Yes.

=== ztest13110.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
/usr/bin/clang -O3 -o ztest13110 ztest13110.c
Checking for strerror... Yes.

=== ztest13110.c ===
#include <unistd.h>
int main() { return 0; }
===
/usr/bin/clang -c -O3 ztest13110.c
Checking for unistd.h... Yes.

=== ztest13110.c ===
#include <stdarg.h>
int main() { return 0; }
===
/usr/bin/clang -c -O3 ztest13110.c
Checking for stdarg.h... Yes.

=== ztest13110.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
/usr/bin/clang -c -O3 ztest13110.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest13110.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/usr/bin/clang -O3 -o ztest13110 ztest13110.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest13110.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/usr/bin/clang -c -O3 ztest13110.c
Checking for return value of vsnprintf()... Yes.

=== ztest13110.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
/usr/bin/clang -c -O3 ztest13110.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = /usr/bin/clang
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = /usr/bin/clang -E
EXE =
LDCONFIG = ldconfig
LDFLAGS = -stdlib=libc++ -headerpad_max_install_names
LDSHARED = /usr/bin/clang -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/meister/Development/cando/brcl/build/cando.app/Contents/Resources/externals/common
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure -shared --prefix=/Users/meister/Development/cando/brcl/build/cando.app/Contents/Resources/externals/common
Sat Oct 12 09:42:44 EDT 2013
=== ztest21710.c ===
extern int getchar();
int hello() {return getchar();}
===
/usr/bin/clang -c ztest21710.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest21710.c ===
int foo() { return 0; }
===
/usr/bin/clang -c -O3 ztest21710.c

Checking for shared library support...
=== ztest21710.c ===
extern int getchar();
int hello() {return getchar();}
===
/usr/bin/clang -w -c -O3 -fPIC ztest21710.c
/usr/bin/clang -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest21710.dylib ztest21710.o
Building shared library libz.1.2.8.dylib with /usr/bin/clang.

=== ztest21710.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
/usr/bin/clang -c -O3 -D_LARGEFILE64_SOURCE=1 ztest21710.c
ztest21710.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/types.h:172:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest21710.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
/usr/bin/clang -O3 -o ztest21710 ztest21710.c
Checking for fseeko... Yes.

=== ztest21710.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
/usr/bin/clang -O3 -o ztest21710 ztest21710.c
Checking for strerror... Yes.

=== ztest21710.c ===
#include <unistd.h>
int main() { return 0; }
===
/usr/bin/clang -c -O3 ztest21710.c
Checking for unistd.h... Yes.

=== ztest21710.c ===
#include <stdarg.h>
int main() { return 0; }
===
/usr/bin/clang -c -O3 ztest21710.c
Checking for stdarg.h... Yes.

=== ztest21710.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
/usr/bin/clang -c -O3 ztest21710.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest21710.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/usr/bin/clang -O3 -o ztest21710 ztest21710.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest21710.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/usr/bin/clang -c -O3 ztest21710.c
Checking for return value of vsnprintf()... Yes.

=== ztest21710.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
/usr/bin/clang -c -O3 ztest21710.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = /usr/bin/clang
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = /usr/bin/clang -E
EXE =
LDCONFIG = ldconfig
LDFLAGS = -stdlib=libc++ -headerpad_max_install_names
LDSHARED = /usr/bin/clang -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/meister/Development/cando/brcl/build/cando.app/Contents/Resources/externals/common
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure -shared --prefix=/Users/meister/Development/cando/brcl/build/cando.app/Contents/Resources/externals/common
Tue Dec  3 17:39:05 EST 2013
=== ztest35205.c ===
extern int getchar();
int hello() {return getchar();}
===
/usr/bin/clang -c ztest35205.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest35205.c ===
int foo() { return 0; }
===
/usr/bin/clang -c -O3 ztest35205.c

Checking for shared library support...
=== ztest35205.c ===
extern int getchar();
int hello() {return getchar();}
===
/usr/bin/clang -w -c -O3 -fPIC ztest35205.c
/usr/bin/clang -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest35205.dylib ztest35205.o
Building shared library libz.1.2.8.dylib with /usr/bin/clang.

=== ztest35205.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
/usr/bin/clang -c -O3 -D_LARGEFILE64_SOURCE=1 ztest35205.c
ztest35205.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest35205.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
/usr/bin/clang -O3 -o ztest35205 ztest35205.c
Checking for fseeko... Yes.

=== ztest35205.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
/usr/bin/clang -O3 -o ztest35205 ztest35205.c
Checking for strerror... Yes.

=== ztest35205.c ===
#include <unistd.h>
int main() { return 0; }
===
/usr/bin/clang -c -O3 ztest35205.c
Checking for unistd.h... Yes.

=== ztest35205.c ===
#include <stdarg.h>
int main() { return 0; }
===
/usr/bin/clang -c -O3 ztest35205.c
Checking for stdarg.h... Yes.

=== ztest35205.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
/usr/bin/clang -c -O3 ztest35205.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest35205.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/usr/bin/clang -O3 -o ztest35205 ztest35205.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest35205.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/usr/bin/clang -c -O3 ztest35205.c
Checking for return value of vsnprintf()... Yes.

=== ztest35205.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
/usr/bin/clang -c -O3 ztest35205.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = /usr/bin/clang
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = /usr/bin/clang -E
EXE =
LDCONFIG = ldconfig
LDFLAGS = -stdlib=libc++ -headerpad_max_install_names
LDSHARED = /usr/bin/clang -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/meister/Development/cando/brcl/build/cando.app/Contents/Resources/externals/common
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure -shared --prefix=/Users/meister/Development/cando/brcl/build/cando.app/Contents/Resources/externals/common
Wed Jan  8 19:08:46 EST 2014
=== ztest53737.c ===
extern int getchar();
int hello() {return getchar();}
===
/usr/bin/clang -c ztest53737.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest53737.c ===
int foo() { return 0; }
===
/usr/bin/clang -c -O3 ztest53737.c

Checking for shared library support...
=== ztest53737.c ===
extern int getchar();
int hello() {return getchar();}
===
/usr/bin/clang -w -c -O3 -fPIC ztest53737.c
/usr/bin/clang -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest53737.dylib ztest53737.o
Building shared library libz.1.2.8.dylib with /usr/bin/clang.

=== ztest53737.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
/usr/bin/clang -c -O3 -D_LARGEFILE64_SOURCE=1 ztest53737.c
ztest53737.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest53737.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
/usr/bin/clang -O3 -o ztest53737 ztest53737.c
Checking for fseeko... Yes.

=== ztest53737.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
/usr/bin/clang -O3 -o ztest53737 ztest53737.c
Checking for strerror... Yes.

=== ztest53737.c ===
#include <unistd.h>
int main() { return 0; }
===
/usr/bin/clang -c -O3 ztest53737.c
Checking for unistd.h... Yes.

=== ztest53737.c ===
#include <stdarg.h>
int main() { return 0; }
===
/usr/bin/clang -c -O3 ztest53737.c
Checking for stdarg.h... Yes.

=== ztest53737.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
/usr/bin/clang -c -O3 ztest53737.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest53737.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/usr/bin/clang -O3 -o ztest53737 ztest53737.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest53737.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/usr/bin/clang -c -O3 ztest53737.c
Checking for return value of vsnprintf()... Yes.

=== ztest53737.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
/usr/bin/clang -c -O3 ztest53737.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = /usr/bin/clang
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = /usr/bin/clang -E
EXE =
LDCONFIG = ldconfig
LDFLAGS = -stdlib=libc++ -headerpad_max_install_names
LDSHARED = /usr/bin/clang -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/meister/Development/cando/brcl/build/cando.app/Contents/Resources/externals/common
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure -shared --prefix=/Users/meister/Development/cando/clasp/build/cando.app/Contents/Resources/externals/common
Thu Apr 24 16:30:35 EDT 2014
=== ztest89139.c ===
extern int getchar();
int hello() {return getchar();}
===
/usr/bin/clang -c ztest89139.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest89139.c ===
int foo() { return 0; }
===
/usr/bin/clang -c -O3 ztest89139.c

Checking for shared library support...
=== ztest89139.c ===
extern int getchar();
int hello() {return getchar();}
===
/usr/bin/clang -w -c -O3 -fPIC ztest89139.c
/usr/bin/clang -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest89139.dylib ztest89139.o
Building shared library libz.1.2.8.dylib with /usr/bin/clang.

=== ztest89139.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
/usr/bin/clang -c -O3 -D_LARGEFILE64_SOURCE=1 ztest89139.c
ztest89139.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest89139.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
/usr/bin/clang -O3 -o ztest89139 ztest89139.c
Checking for fseeko... Yes.

=== ztest89139.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
/usr/bin/clang -O3 -o ztest89139 ztest89139.c
Checking for strerror... Yes.

=== ztest89139.c ===
#include <unistd.h>
int main() { return 0; }
===
/usr/bin/clang -c -O3 ztest89139.c
Checking for unistd.h... Yes.

=== ztest89139.c ===
#include <stdarg.h>
int main() { return 0; }
===
/usr/bin/clang -c -O3 ztest89139.c
Checking for stdarg.h... Yes.

=== ztest89139.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
/usr/bin/clang -c -O3 ztest89139.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest89139.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/usr/bin/clang -O3 -o ztest89139 ztest89139.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest89139.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/usr/bin/clang -c -O3 ztest89139.c
Checking for return value of vsnprintf()... Yes.

=== ztest89139.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
/usr/bin/clang -c -O3 ztest89139.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = /usr/bin/clang
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = /usr/bin/clang -E
EXE =
LDCONFIG = ldconfig
LDFLAGS = -stdlib=libc++ -headerpad_max_install_names
LDSHARED = /usr/bin/clang -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/meister/Development/cando/clasp/build/cando.app/Contents/Resources/externals/common
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure -shared --prefix=/Users/meister/Development/cando/clasp/build/cando.app/Contents/Resources/externals/common
Thu Apr 24 16:40:16 EDT 2014
=== ztest72319.c ===
extern int getchar();
int hello() {return getchar();}
===
/usr/bin/clang -c ztest72319.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest72319.c ===
int foo() { return 0; }
===
/usr/bin/clang -c -O3 ztest72319.c

Checking for shared library support...
=== ztest72319.c ===
extern int getchar();
int hello() {return getchar();}
===
/usr/bin/clang -w -c -O3 -fPIC ztest72319.c
/usr/bin/clang -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest72319.dylib ztest72319.o
Building shared library libz.1.2.8.dylib with /usr/bin/clang.

=== ztest72319.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
/usr/bin/clang -c -O3 -D_LARGEFILE64_SOURCE=1 ztest72319.c
ztest72319.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest72319.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
/usr/bin/clang -O3 -o ztest72319 ztest72319.c
Checking for fseeko... Yes.

=== ztest72319.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
/usr/bin/clang -O3 -o ztest72319 ztest72319.c
Checking for strerror... Yes.

=== ztest72319.c ===
#include <unistd.h>
int main() { return 0; }
===
/usr/bin/clang -c -O3 ztest72319.c
Checking for unistd.h... Yes.

=== ztest72319.c ===
#include <stdarg.h>
int main() { return 0; }
===
/usr/bin/clang -c -O3 ztest72319.c
Checking for stdarg.h... Yes.

=== ztest72319.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
/usr/bin/clang -c -O3 ztest72319.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest72319.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/usr/bin/clang -O3 -o ztest72319 ztest72319.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest72319.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/usr/bin/clang -c -O3 ztest72319.c
Checking for return value of vsnprintf()... Yes.

=== ztest72319.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
/usr/bin/clang -c -O3 ztest72319.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = /usr/bin/clang
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = /usr/bin/clang -E
EXE =
LDCONFIG = ldconfig
LDFLAGS = -stdlib=libc++ -headerpad_max_install_names
LDSHARED = /usr/bin/clang -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/meister/Development/cando/clasp/build/cando.app/Contents/Resources/externals/common
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure -shared --prefix=/Users/meister/Development/cando/clasp/build/cando.app/Contents/Resources/externals/common
Thu Apr 24 18:21:15 EDT 2014
=== ztest99413.c ===
extern int getchar();
int hello() {return getchar();}
===
/usr/bin/clang -c ztest99413.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest99413.c ===
int foo() { return 0; }
===
/usr/bin/clang -c -O3 ztest99413.c

Checking for shared library support...
=== ztest99413.c ===
extern int getchar();
int hello() {return getchar();}
===
/usr/bin/clang -w -c -O3 -fPIC ztest99413.c
/usr/bin/clang -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest99413.dylib ztest99413.o
Building shared library libz.1.2.8.dylib with /usr/bin/clang.

=== ztest99413.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
/usr/bin/clang -c -O3 -D_LARGEFILE64_SOURCE=1 ztest99413.c
ztest99413.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest99413.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
/usr/bin/clang -O3 -o ztest99413 ztest99413.c
Checking for fseeko... Yes.

=== ztest99413.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
/usr/bin/clang -O3 -o ztest99413 ztest99413.c
Checking for strerror... Yes.

=== ztest99413.c ===
#include <unistd.h>
int main() { return 0; }
===
/usr/bin/clang -c -O3 ztest99413.c
Checking for unistd.h... Yes.

=== ztest99413.c ===
#include <stdarg.h>
int main() { return 0; }
===
/usr/bin/clang -c -O3 ztest99413.c
Checking for stdarg.h... Yes.

=== ztest99413.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
/usr/bin/clang -c -O3 ztest99413.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest99413.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/usr/bin/clang -O3 -o ztest99413 ztest99413.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest99413.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/usr/bin/clang -c -O3 ztest99413.c
Checking for return value of vsnprintf()... Yes.

=== ztest99413.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
/usr/bin/clang -c -O3 ztest99413.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = /usr/bin/clang
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = /usr/bin/clang -E
EXE =
LDCONFIG = ldconfig
LDFLAGS = -stdlib=libc++ -headerpad_max_install_names
LDSHARED = /usr/bin/clang -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/meister/Development/cando/clasp/build/cando.app/Contents/Resources/externals/common
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure -shared --prefix=/Users/meister/Development/cando/clasp/build/cando.app/Contents/Resources/externals/common
Thu Apr 24 23:49:15 EDT 2014
=== ztest45915.c ===
extern int getchar();
int hello() {return getchar();}
===
/usr/bin/clang -c ztest45915.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest45915.c ===
int foo() { return 0; }
===
/usr/bin/clang -c -O3 ztest45915.c

Checking for shared library support...
=== ztest45915.c ===
extern int getchar();
int hello() {return getchar();}
===
/usr/bin/clang -w -c -O3 -fPIC ztest45915.c
/usr/bin/clang -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest45915.dylib ztest45915.o
Building shared library libz.1.2.8.dylib with /usr/bin/clang.

=== ztest45915.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
/usr/bin/clang -c -O3 -D_LARGEFILE64_SOURCE=1 ztest45915.c
ztest45915.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest45915.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
/usr/bin/clang -O3 -o ztest45915 ztest45915.c
Checking for fseeko... Yes.

=== ztest45915.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
/usr/bin/clang -O3 -o ztest45915 ztest45915.c
Checking for strerror... Yes.

=== ztest45915.c ===
#include <unistd.h>
int main() { return 0; }
===
/usr/bin/clang -c -O3 ztest45915.c
Checking for unistd.h... Yes.

=== ztest45915.c ===
#include <stdarg.h>
int main() { return 0; }
===
/usr/bin/clang -c -O3 ztest45915.c
Checking for stdarg.h... Yes.

=== ztest45915.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
/usr/bin/clang -c -O3 ztest45915.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest45915.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/usr/bin/clang -O3 -o ztest45915 ztest45915.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest45915.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/usr/bin/clang -c -O3 ztest45915.c
Checking for return value of vsnprintf()... Yes.

=== ztest45915.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
/usr/bin/clang -c -O3 ztest45915.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = /usr/bin/clang
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = /usr/bin/clang -E
EXE =
LDCONFIG = ldconfig
LDFLAGS = -stdlib=libc++ -headerpad_max_install_names
LDSHARED = /usr/bin/clang -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/meister/Development/cando/clasp/build/cando.app/Contents/Resources/externals/common
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure -shared --prefix=/Users/meister/Development/cando/clasp/build/cando.app/Contents/Resources/externals/common
Fri Apr 25 11:15:24 EDT 2014
=== ztest58621.c ===
extern int getchar();
int hello() {return getchar();}
===
/usr/bin/clang -c ztest58621.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest58621.c ===
int foo() { return 0; }
===
/usr/bin/clang -c -O3 ztest58621.c

Checking for shared library support...
=== ztest58621.c ===
extern int getchar();
int hello() {return getchar();}
===
/usr/bin/clang -w -c -O3 -fPIC ztest58621.c
/usr/bin/clang -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest58621.dylib ztest58621.o
Building shared library libz.1.2.8.dylib with /usr/bin/clang.

=== ztest58621.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
/usr/bin/clang -c -O3 -D_LARGEFILE64_SOURCE=1 ztest58621.c
ztest58621.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest58621.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
/usr/bin/clang -O3 -o ztest58621 ztest58621.c
Checking for fseeko... Yes.

=== ztest58621.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
/usr/bin/clang -O3 -o ztest58621 ztest58621.c
Checking for strerror... Yes.

=== ztest58621.c ===
#include <unistd.h>
int main() { return 0; }
===
/usr/bin/clang -c -O3 ztest58621.c
Checking for unistd.h... Yes.

=== ztest58621.c ===
#include <stdarg.h>
int main() { return 0; }
===
/usr/bin/clang -c -O3 ztest58621.c
Checking for stdarg.h... Yes.

=== ztest58621.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
/usr/bin/clang -c -O3 ztest58621.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest58621.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/usr/bin/clang -O3 -o ztest58621 ztest58621.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest58621.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/usr/bin/clang -c -O3 ztest58621.c
Checking for return value of vsnprintf()... Yes.

=== ztest58621.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
/usr/bin/clang -c -O3 ztest58621.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = /usr/bin/clang
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = /usr/bin/clang -E
EXE =
LDCONFIG = ldconfig
LDFLAGS = -stdlib=libc++ -headerpad_max_install_names
LDSHARED = /usr/bin/clang -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/meister/Development/cando/clasp/build/cando.app/Contents/Resources/externals/common
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure -shared --prefix=/Users/meister/Development/cando/clasp/build/cando.app/Contents/Resources/externals/common
Thu Jun 19 20:16:10 EDT 2014
Checking for gcc...
=== ztest8673.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest8673.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest8673.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest8673.c

Checking for shared library support...
=== ztest8673.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest8673.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest8673.dylib ztest8673.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest8673.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest8673.c
ztest8673.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest8673.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest8673 ztest8673.c
Checking for fseeko... Yes.

=== ztest8673.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest8673 ztest8673.c
Checking for strerror... Yes.

=== ztest8673.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest8673.c
Checking for unistd.h... Yes.

=== ztest8673.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest8673.c
Checking for stdarg.h... Yes.

=== ztest8673.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest8673.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest8673.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest8673 ztest8673.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest8673.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest8673.c
Checking for return value of vsnprintf()... Yes.

=== ztest8673.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest8673.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/meister/Development/cando/clasp/build/cando.app/Contents/Resources/externals/common
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure -shared --prefix=/Users/meister/Development/cando/clasp/build/cando.app/Contents/Resources/externals/common
Thu Jun 19 20:30:53 EDT 2014
Checking for gcc...
=== ztest24136.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest24136.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest24136.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest24136.c

Checking for shared library support...
=== ztest24136.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest24136.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest24136.dylib ztest24136.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest24136.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest24136.c
ztest24136.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest24136.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest24136 ztest24136.c
Checking for fseeko... Yes.

=== ztest24136.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest24136 ztest24136.c
Checking for strerror... Yes.

=== ztest24136.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest24136.c
Checking for unistd.h... Yes.

=== ztest24136.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest24136.c
Checking for stdarg.h... Yes.

=== ztest24136.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest24136.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest24136.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest24136 ztest24136.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest24136.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest24136.c
Checking for return value of vsnprintf()... Yes.

=== ztest24136.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest24136.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/meister/Development/cando/clasp/build/cando.app/Contents/Resources/externals/common
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure -shared --prefix=/Users/meister/local/dependent-clasp/externals/common
Fri Jul  4 01:29:07 EDT 2014
Checking for gcc...
=== ztest10983.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest10983.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest10983.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest10983.c

Checking for shared library support...
=== ztest10983.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest10983.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest10983.dylib ztest10983.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest10983.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest10983.c
ztest10983.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest10983.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest10983 ztest10983.c
Checking for fseeko... Yes.

=== ztest10983.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest10983 ztest10983.c
Checking for strerror... Yes.

=== ztest10983.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest10983.c
Checking for unistd.h... Yes.

=== ztest10983.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest10983.c
Checking for stdarg.h... Yes.

=== ztest10983.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest10983.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest10983.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest10983 ztest10983.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest10983.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest10983.c
Checking for return value of vsnprintf()... Yes.

=== ztest10983.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest10983.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/meister/local/dependent-clasp/externals/common
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure -shared --prefix=/Users/meister/local/dependent-clasp/externals/common
Fri Jul  4 01:37:44 EDT 2014
Checking for gcc...
=== ztest63652.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest63652.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest63652.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest63652.c

Checking for shared library support...
=== ztest63652.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest63652.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8 -O3 -fPIC -o ztest63652.dylib ztest63652.o
Building shared library libz.1.2.8.dylib with gcc.

=== ztest63652.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest63652.c
ztest63652.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest63652.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest63652 ztest63652.c
Checking for fseeko... Yes.

=== ztest63652.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest63652 ztest63652.c
Checking for strerror... Yes.

=== ztest63652.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest63652.c
Checking for unistd.h... Yes.

=== ztest63652.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest63652.c
Checking for stdarg.h... Yes.

=== ztest63652.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest63652.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest63652.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest63652 ztest63652.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest63652.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest63652.c
Checking for return value of vsnprintf()... Yes.

=== ztest63652.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest63652.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.8
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.8.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/meister/local/dependent-clasp/externals/common
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure -shared --prefix=/home/meister/local/dependent-clasp/externals/common
Fri Jul  4 11:53:07 EDT 2014
Checking for gcc...
=== ztest20801.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest20801.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest20801.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest20801.c

Checking for shared library support...
=== ztest20801.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest20801.c
gcc -shared -Wl,-soname,libz.so.1,--version-script,zlib.map -O3 -fPIC -o ztest20801.so ztest20801.o
Building shared library libz.so.1.2.8 with gcc.

=== ztest20801.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest20801.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest20801.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest20801 ztest20801.c
Checking for strerror... Yes.

=== ztest20801.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest20801.c
Checking for unistd.h... Yes.

=== ztest20801.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest20801.c
Checking for stdarg.h... Yes.

=== ztest20801.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest20801.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest20801.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest20801 ztest20801.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest20801.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest20801.c
Checking for return value of vsnprintf()... Yes.

=== ztest20801.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest20801.c
Checking for attribute(visibility) support... Yes.

ALL = static shared all64
AR = ar
ARFLAGS = rc
CC = gcc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -shared -Wl,-soname,libz.so.1,--version-script,zlib.map
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB = libz.so
SHAREDLIBM = libz.so.1
SHAREDLIBV = libz.so.1.2.8
STATICLIB = libz.a
TEST = all teststatic testshared test64
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/meister/local/dependent-clasp/externals/common
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure -shared --prefix=/home/meister/local/dependent-clasp/externals/common
Sat Jul  5 10:19:12 EDT 2014
Checking for gcc...
=== ztest40248.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest40248.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest40248.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest40248.c

Checking for shared library support...
=== ztest40248.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest40248.c
gcc -shared -Wl,-soname,libz.so.1,--version-script,zlib.map -O3 -fPIC -o ztest40248.so ztest40248.o
Building shared library libz.so.1.2.8 with gcc.

=== ztest40248.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest40248.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest40248.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest40248 ztest40248.c
Checking for strerror... Yes.

=== ztest40248.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest40248.c
Checking for unistd.h... Yes.

=== ztest40248.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest40248.c
Checking for stdarg.h... Yes.

=== ztest40248.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest40248.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest40248.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest40248 ztest40248.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest40248.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest40248.c
Checking for return value of vsnprintf()... Yes.

=== ztest40248.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest40248.c
Checking for attribute(visibility) support... Yes.

ALL = static shared all64
AR = ar
ARFLAGS = rc
CC = gcc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -shared -Wl,-soname,libz.so.1,--version-script,zlib.map
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB = libz.so
SHAREDLIBM = libz.so.1
SHAREDLIBV = libz.so.1.2.8
STATICLIB = libz.a
TEST = all teststatic testshared test64
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/meister/local/dependent-clasp/externals/common
sharedlibdir = ${libdir}
uname = Linux
--------------------


